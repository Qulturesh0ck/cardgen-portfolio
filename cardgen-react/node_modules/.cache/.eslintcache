[{"C:\\Users\\rawra\\Desktop\\Nucamp\\Python\\3-DevOps\\Letsgetit\\portfolio\\cardgen-react\\src\\index.js":"1","C:\\Users\\rawra\\Desktop\\Nucamp\\Python\\3-DevOps\\Letsgetit\\portfolio\\cardgen-react\\src\\App.js":"2","C:\\Users\\rawra\\Desktop\\Nucamp\\Python\\3-DevOps\\Letsgetit\\portfolio\\cardgen-react\\src\\reportWebVitals.js":"3","C:\\Users\\rawra\\Desktop\\Nucamp\\Python\\3-DevOps\\Letsgetit\\portfolio\\cardgen-react\\src\\components\\cardNameList.js":"4","C:\\Users\\rawra\\Desktop\\Nucamp\\Python\\3-DevOps\\Letsgetit\\portfolio\\cardgen-react\\src\\components\\CardNameList.js":"5","C:\\Users\\rawra\\Desktop\\Nucamp\\Python\\3-DevOps\\Letsgetit\\portfolio\\cardgen-react\\src\\components\\SaveCardTesting.js":"6","C:\\Users\\rawra\\Desktop\\Nucamp\\Python\\3-DevOps\\Letsgetit\\portfolio\\cardgen-react\\src\\components\\UserLogin.js":"7"},{"size":628,"mtime":1677195222714,"results":"8","hashOfConfig":"9"},{"size":9381,"mtime":1677302090218,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":1067,"mtime":1676838178056,"results":"12","hashOfConfig":"9"},{"size":1085,"mtime":1676839504443,"results":"13","hashOfConfig":"9"},{"size":779,"mtime":1677208157181,"results":"14","hashOfConfig":"9"},{"size":1509,"mtime":1677209018511,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"1d2qmp",{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","suppressedMessages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\rawra\\Desktop\\Nucamp\\Python\\3-DevOps\\Letsgetit\\portfolio\\cardgen-react\\src\\index.js",["40"],[],"import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nvar cors = require('cors')\n//App.use(cors())\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","C:\\Users\\rawra\\Desktop\\Nucamp\\Python\\3-DevOps\\Letsgetit\\portfolio\\cardgen-react\\src\\App.js",["41","42","43","44","45","46"],[],"import { useEffect, useState } from 'react';\nimport './App.css';\n/*\nimport axios from \"axios\";\nimport { format } from \"date-fns\";\nimport { Card, User } from './models.py';\nimport CardNameList from './components/CardNameList.js';\nimport Login from './components/UserLogin';\nimport SaveCardData from './components/SaveCardTesting.js'\nconst card = [Card]\n*/\n\nfunction CardNameList2() {\n  {\n    const baseUrl = 'http://127.0.0.1:5000/'\n    const [selectedCardID, setSelectedCardID] = useState(\"\");\n    const [selectedCardImage, setSelectedCardImage] = useState(\"\");\n    const [cardName, setCardName] = useState([])\n    useEffect(() => {\n      fetch(`${baseUrl}generatedcards`, {\n        'methods': 'GET',\n        //withCredentials: true,\n        //mode: 'no-cors',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      })\n        .then(resp => resp.json())\n        .then(resp => setCardName(resp))\n        .catch(error => console.log(error))\n    }, []);\n\n    const handleLoadImage = () => {\n      fetch(`http://127.0.0.1:5000/images/Gencards/${selectedCardID}`, {\n        methods: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      })\n        .then((resp) => resp.blob())\n        .then((resp) => setSelectedCardImage(URL.createObjectURL(resp)))\n        .catch((error) => console.log(error));\n    };\n\n    const handleSelectChange = (event) => {\n      setSelectedCardID(event.target.value);\n      setSelectedCardImage(\"\");\n    };\n\n    return (\n      <section className='genCard'>\n        <div className='cardList'>\n          <select onChange={handleSelectChange} value={{ selectedCardID }}>\n            <option value=\"\">--Select a card--</option>\n            {cardName.map(list => {\n              return (\n                <option key={list.imagepath} value={list.imagepath}>\n                  {list.card_name}\n                </option>\n              )\n            })}\n          </select>\n          <button onClick={handleLoadImage} disabled={!{ selectedCardID }}>\n            Load\n          </button>\n          <CardImagePath selectedCardID={selectedCardID} />\n        </div>\n      </section >\n    )\n  }\n}\n\n\nfunction Navbar() {\n  return (\n    <div className=\"navbar\">\n      <img src=\"images\\logo.png\" alt=\"logo\" className=\"navlogo\" />\n      <div className=\"header\">\n        <h1>Card Generator Î±</h1>\n      </div>\n\n      <div className=\"upper\">\n        <button className=\"topbutton\" type=\"button\" onClick={() => console.log('Login')}>Login</button>\n        <button className=\"topbutton\" type=\"button\" onClick={() => console.log('Logout')}>Logout</button>\n      </div>\n    </div >\n  );\n}\n\n\nfunction CardImage() {\n  return (\n    <section className=\"genCard\" >\n      <img src=\"images\\cardmockupALPH1.png\" alt=\"Placeholder\" />\n    </section>\n  );\n\n\n}\n\nfunction CardImagePath(props) {\n  {\n    {\n      const baseURL = 'http://127.0.0.1:5000/'\n      const frontEndURL = 'http://127.0.0.1:3000/images/Gencards/'\n      const [cardImage, setCardImage] = useState([])\n\n      useEffect(() => {\n        fetch(`${baseURL}generatedcards/${props.selectedCardID}`, {\n          'methods': 'GET',\n          //withCredentials: true,\n          //mode: 'no-cors',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        })\n          .then(resp => resp.json())\n          .then(resp => setCardImage(resp))\n          .catch(error => console.log(error))\n      }, [props.selectedCardID])\n\n\n\n      return (\n        <section className=\"genCard\">\n          <h2>Testing Card Image</h2>\n\n          <section className=\"genCard\">\n            <h2>{props.selectedCardID}</h2>\n            <img src={frontEndURL + props.selectedCardID} alt=\"Generated Card\" />\n          </section>\n        </section>\n      )\n    }\n  }\n}\n\n\n\n\nfunction Form() {\n  const [name, setCardNameForm] = useState('');\n  const [cost, setCost] = useState('');\n  const [cardClass, setCardClass] = useState('');\n  const [cardType, setCardType] = useState('Artifact');\n  const [alignment, setAlignment] = useState('Air');\n  const [bp, setBattlePoints] = useState('');\n  const [hp, setHealthPoints] = useState('');\n  const [description, setDescription] = useState('');\n  const [cardData, setCardData] = useState([]);\n  const [image, setImage] = useState('');\n  const user_id = 1;\n  //const [user_idDELETE, getUser] = useState(user.user_id)\n  const handleSave = (e) => {\n    e.preventDefault();\n    const formData = {\n      user_id,\n      name,\n      image,\n      //cost,\n      //cardClass,\n      //cardType,\n      //alignment,\n      bp,\n      hp,\n      description,\n    };\n    fetch('http://127.0.0.1:5000/cards', {\n      method: 'POST',\n      //mode: 'no-cors',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(formData)\n    })\n      .then(resp => resp.json())\n      .then(data => {\n        setCardData([...cardData, data]);\n        console.log('Card data saved successfully!');\n      })\n      .catch(error => console.error(error));\n  };\n\n  return (\n    <main className=\"flex-container\">\n      <section className=\"keySpace\"></section>\n      <section className=\"genForm\">\n        <form>\n          <div className=\"form-container\">\n            <label htmlFor=\"cardName\">Name</label>\n\n            <input\n              type=\"text\"\n              id=\"cardName\"\n              name=\"cardName\"\n              value={name}\n              onChange={(e) => setCardNameForm(e.target.value)}\n            />\n          </div>\n          <div className=\"form-container\">\n            <label htmlFor=\"PHcost\">Cost</label>\n            <input\n              type=\"text\"\n              value={cost}\n              onChange={(e) => setCost(e.target.value)}\n            />\n          </div>\n          <div className=\"form-container\">\n            <label htmlFor=\"PHclass\">Class</label>\n            <input\n              type=\"text\"\n              value={cardClass}\n              onChange={(e) => setCardClass(e.target.value)}\n            />\n          </div>\n          <div className=\"form-container\">\n            <label htmlFor=\"cardType\">Card Type</label>\n            <select\n              name=\"cardPicker\"\n              id=\"cardPicker\"\n              value={cardType}\n              onChange={(e) => setCardType(e.target.value)}\n            >\n              <option value=\"Artifact\">Artifact</option>\n              <option value=\"Magic\">Magic</option>\n              <option value=\"Champion\">Champion</option>\n              <option value=\"Creature\">Creature</option>\n              <option value=\"Source\">Source</option>\n            </select>\n          </div>\n          <div className=\"form-container\">\n            <label htmlFor=\"PHalignment\">Alignment</label>\n\n            <select\n              name=\"alignmentPicker\"\n              id=\"alingmentPicker\"\n              value={alignment}\n              onChange={(e) => setAlignment(e.target.value)}\n            >\n              <option value=\"Air\">Air</option>\n              <option value=\"Blood\">Blood</option>\n              <option value=\"Earth\">Earth</option>\n              <option value=\"Fire\">Fire</option>\n              <option value=\"Radiant\">Radiant</option>\n              <option value=\"Shadow\">Shadow</option>\n              <option value=\"Water\">Water</option>\n            </select>\n          </div>\n          <div className='form-container'>\n            <label\n              htmlFor=\"img\"\n            >Select image:</label>\n          </div>\n          <div className=\"form-container\">\n\n            <input\n              type=\"file\"\n              id=\"img\"\n              name=\"img\"\n              accept=\"image/png, image/jpeg\"\n              value={image}\n              onChange={(e) => setImage(e.target.value)} />\n            <label htmlFor=\"statLine1\">Battle Points</label>\n            <input\n              type=\"text\"\n              className=\"statLine\"\n              id=\"statLine1\"\n              name=\"statLine1\"\n              value={bp}\n              onChange={(e) => setBattlePoints(e.target.value)}\n            />\n            <label htmlFor=\"statLine2\">Health Points</label>\n            <input\n              type=\"text\"\n              className=\"statLine\"\n              id=\"statLine2\"\n              name=\"statLine2\"\n              value={hp}\n              onChange={(e) => setHealthPoints(e.target.value)}\n            />\n          </div>\n          <div className=\"form-container\">\n            <textarea\n              id=\"description\"\n              name=\"description\"\n              rows=\"10\"\n              cols=\"35\"\n              value={description}\n              onChange={(e) => setDescription(e.target.value)}\n            >\n              Enter card text...\n            </textarea>\n          </div>\n          <div className=\"buttonContainer\">\n            <button type=\"button\" onClick={handleSave}>\n              Save\n            </button>\n            <button type=\"button\" onClick={() => console.log('Load')}>\n              Load\n            </button>\n            <button type=\"button\" onClick={() => console.log('Clear')}>\n              Clear\n            </button>\n            <button type=\"button\" onClick={() => console.log('Export')}>\n              Export\n            </button>\n          </div>\n        </form>\n      </section >\n      <CardNameList2 />\n    </main >\n  );\n}\n\n\n\n\n\nfunction App() {\n  return (\n    <div>\n      <Navbar />\n      <Form />\n    </div>\n  );\n}\n\nexport default App;\n\n","C:\\Users\\rawra\\Desktop\\Nucamp\\Python\\3-DevOps\\Letsgetit\\portfolio\\cardgen-react\\src\\reportWebVitals.js",[],[],[],"C:\\Users\\rawra\\Desktop\\Nucamp\\Python\\3-DevOps\\Letsgetit\\portfolio\\cardgen-react\\src\\components\\cardNameList.js",["47","48"],[],"C:\\Users\\rawra\\Desktop\\Nucamp\\Python\\3-DevOps\\Letsgetit\\portfolio\\cardgen-react\\src\\components\\CardNameList.js",["49","50"],[],"C:\\Users\\rawra\\Desktop\\Nucamp\\Python\\3-DevOps\\Letsgetit\\portfolio\\cardgen-react\\src\\components\\SaveCardTesting.js",["51","52","53"],[],"C:\\Users\\rawra\\Desktop\\Nucamp\\Python\\3-DevOps\\Letsgetit\\portfolio\\cardgen-react\\src\\components\\UserLogin.js",["54"],[],{"ruleId":"55","severity":1,"message":"56","line":8,"column":5,"nodeType":"57","messageId":"58","endLine":8,"endColumn":9},{"ruleId":"59","severity":1,"message":"60","line":14,"column":3,"nodeType":"61","messageId":"62","endLine":70,"endColumn":4},{"ruleId":"55","severity":1,"message":"63","line":17,"column":12,"nodeType":"57","messageId":"58","endLine":17,"endColumn":29},{"ruleId":"55","severity":1,"message":"64","line":91,"column":10,"nodeType":"57","messageId":"58","endLine":91,"endColumn":19},{"ruleId":"59","severity":1,"message":"60","line":102,"column":3,"nodeType":"61","messageId":"62","endLine":135,"endColumn":4},{"ruleId":"59","severity":1,"message":"60","line":103,"column":5,"nodeType":"61","messageId":"62","endLine":134,"endColumn":6},{"ruleId":"55","severity":1,"message":"65","line":106,"column":14,"nodeType":"57","messageId":"58","endLine":106,"endColumn":23},{"ruleId":"59","severity":1,"message":"60","line":4,"column":5,"nodeType":"61","messageId":"62","endLine":34,"endColumn":6},{"ruleId":"59","severity":1,"message":"60","line":21,"column":9,"nodeType":"61","messageId":"62","endLine":33,"endColumn":10},{"ruleId":"59","severity":1,"message":"60","line":4,"column":5,"nodeType":"61","messageId":"62","endLine":34,"endColumn":6},{"ruleId":"59","severity":1,"message":"60","line":21,"column":9,"nodeType":"61","messageId":"62","endLine":33,"endColumn":10},{"ruleId":"59","severity":1,"message":"60","line":4,"column":5,"nodeType":"61","messageId":"62","endLine":29,"endColumn":6},{"ruleId":"55","severity":1,"message":"66","line":5,"column":15,"nodeType":"57","messageId":"58","endLine":5,"endColumn":23},{"ruleId":"55","severity":1,"message":"66","line":9,"column":20,"nodeType":"57","messageId":"58","endLine":9,"endColumn":28},{"ruleId":"55","severity":1,"message":"67","line":27,"column":15,"nodeType":"57","messageId":"58","endLine":27,"endColumn":19},"no-unused-vars","'cors' is assigned a value but never used.","Identifier","unusedVar","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","'selectedCardImage' is assigned a value but never used.","'CardImage' is defined but never used.","'cardImage' is assigned a value but never used.","'saveCard' is assigned a value but never used.","'data' is assigned a value but never used."]